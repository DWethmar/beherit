triggers:
  game.created:
    - command: blueprint.create.entity
      condition:
      vars:
        entity$: CreateEntity()
      params:
        components:
          - type: position
            entity$: entity
            data:
              x$: 10 + 10
              y: 10
          - type: graphic
            entity$: entity
            data:
              x$: 10 + 10
              y: 10
  
    - command: blueprint.create.entity
      condition:
      vars:
        entity$: CreateEntity()
      params:
        components:
          - type: position
            entity$: entity
            data:
              x: 50
              y: 50
          - type: follow
            entity$: entity
            data:
              x: 50
              y: 50

  game.updated:
    - command: blueprint.update.entity
      vars:
        pressedUp$: KeyPressed('up') || KeyPressed('w')
        pressedDown$: KeyPressed('down') || KeyPressed('s')
        pressedLeft$: KeyPressed('left') || KeyPressed('a')
        pressedRight$: KeyPressed('right') || KeyPressed('d')
        pos$: first(ListComponents('position'))
        spd: 1 # speed
      condition: pos != nil && (pressedUp || pressedDown || pressedLeft || pressedRight)
      params:
        components:
          - id$: pos.ID
            type: position
            entity$: pos.Entity
            data:
              x$: "let left = pressedLeft ? spd : 0; let right = pressedRight ? spd : 0; pos.Data.X + right - left"
              y$: "let up = pressedUp ? spd : 0; let down = pressedDown ? spd : 0; pos.Data.Y + down - up"

    - command: follow.move-towards-target
      vars:
        entities$: map(ListComponents('follow'), {.Entity})
      condition: len(entities) > 0
      params:
        entities$: entities

  game.input.cursor:
    - command: follow.set-target
      vars:
        entities$: map(ListComponents('follow'), {.Entity})
      condition: len(entities) > 0
      params:
        entities$: entities
        x$: cursor.X
        y$: cursor.Y

  game.draw:
    - command: render
      condition: true
      params:
        screen$: screen
        components$: ListComponents('graphic')