env:
  blueprints:
    - name: skeleton
      description: Skeleton
      components:
        - type: position
          data:
            x: 0
            y: 0
        - type: graphic
          data:
            name: "SkeletonMoveDown1"
    - name: follow
      description: follows the cursor
      components:
        - type: follow
          data:
            x: 0
            y: 0

triggers:
  game.created:
    - command: blueprint.create.entity
      vars:
        entity$: env.CreateEntity()
        components$: find(env.blueprints, .name == 'skeleton').components
        x: 100
        y: 100
      set:
        - path: vars.components[0].data.x
          value: vars.x
        - path: vars.components[0].data.y
          value: vars.y
        - path: vars.components[*].entity
          value: vars.entity
      mapping:
        components$: vars.components

    - command: blueprint.create.entity
      condition:
      vars:
        entity$: env.CreateEntity()
        components$: "concat(
          find(env.blueprints, .name == 'skeleton').components,
          find(env.blueprints, .name == 'follow').components
          )"
        x: 120
        y: 130
      set:
        - path: vars.components[0].data.x
          value: vars.x
        - path: vars.components[0].data.y
          value: vars.y
        - path: vars.components[1].data.x
          value: vars.x
        - path: vars.components[1].data.y
          value: vars.y
        - path: vars.components[*].entity
          value: vars.entity
      mapping:
        components$: vars.components

  game.updated:
    - command: graphics.sort
      mapping:
        graphicComponents$: env.ListComponents('graphic')

    - command: blueprint.update.entity
      vars:
        pressedUp$: env.KeyPressed('up') || env.KeyPressed('w')
        pressedDown$: env.KeyPressed('down') || env.KeyPressed('s')
        pressedLeft$: env.KeyPressed('left') || env.KeyPressed('a')
        pressedRight$: env.KeyPressed('right') || env.KeyPressed('d')
        pos$: first(env.ListComponents('position'))
        spd: 2 # speed
      condition: vars.pos != nil && (vars.pressedUp ||vars. pressedDown || vars.pressedLeft || vars.pressedRight)
      mapping:
        components:
          - id$: vars.pos.ID
            type: position
            entity$: vars.pos.Entity
            data:
              x$: "let left = vars.pressedLeft ? vars.spd : 0; let right = vars.pressedRight ? vars.spd : 0; vars.pos.Data.X + right - left"
              y$: "let up = vars.pressedUp ? vars.spd : 0; let down = vars.pressedDown ? vars.spd : 0; vars.pos.Data.Y + down - up"

    - command: follow.move-towards-target
      vars:
        entities$: map(env.ListComponents('follow'), {.Entity})
      condition: len(vars.entities) > 0
      mapping:
        entities$: vars.entities

  game.input.cursor:
    - command: follow.set-target
      vars:
        entities$: map(env.ListComponents('follow'), {.Entity})
      condition: len(vars.entities) > 0
      mapping:
        entities$: vars.entities
        x$: env.cursor.x
        y$: env.cursor.y

    - command: blueprint.create.entity
      vars:
        entity$: env.CreateEntity()
        components$: find(env.blueprints, .name == 'skeleton').components
        x$: env.cursor.x
        y$: env.cursor.y
      set:
        - path: vars.components[0].data.x
          value: vars.x
        - path: vars.components[0].data.y
          value: vars.y
        - path: vars.components[*].entity
          value: vars.entity
      mapping:
        components$: vars.components

  game.draw:
    - command: render
      condition: true
      mapping:
        screen$: env.screen
        components$: sortBy(env.ListComponents('graphic'), {.Data.Layer}, "desc")
