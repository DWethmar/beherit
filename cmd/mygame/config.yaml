blueprints:
  - name: skeleton
    description: Skeleton
    components:
      - type: position
        data:
          x: 0
          y: 0
      - type: graphic
        data:
          name: "SkeletonMoveDown1"
  - name: follow
    description: follows the cursor
    components:
      - type: follow
        data:
          x: 0
          y: 0

triggers:
  game.created:
    - command: blueprint.create.entity
      vars:
        entity$: CreateEntity()
        skeletonBlueprint$: find(env.blueprints, .Name == 'skeleton')
      params:
        components$: vars.skeletonBlueprint.components
  
    - command: blueprint.create.entity
      condition:
      vars:
        entity$: CreateEntity()
      params:
        components:
          - type: position
            entity$: vars.entity
            data:
              x: 50
              y: 50
          - type: follow
            entity$: vars.entity
            data:
              x: 150
              y: 150

  game.updated:
    - command: blueprint.update.entity
      vars:
        pressedUp$: KeyPressed('up') || KeyPressed('w')
        pressedDown$: KeyPressed('down') || KeyPressed('s')
        pressedLeft$: KeyPressed('left') || KeyPressed('a')
        pressedRight$: KeyPressed('right') || KeyPressed('d')
        pos$: first(ListComponents('position'))
        spd: 1 # speed
      condition: vars.pos != nil && (vars.pressedUp ||vars. pressedDown || vars.pressedLeft || vars.pressedRight)
      params:
        components:
          - id$: vars.pos.ID
            type: position
            entity$: vars.pos.Entity
            data:
              x$: "let left = vars.pressedLeft ? vars.spd : 0; let right = vars.pressedRight ? vars.spd : 0; vars.pos.Data.X + right - left"
              y$: "let up = vars.pressedUp ? vars.spd : 0; let down = vars.pressedDown ? vars.spd : 0; vars.pos.Data.Y + down - up"

    - command: follow.move-towards-target
      vars:
        entities$: map(ListComponents('follow'), {.Entity})
      condition: len(vars.entities) > 0
      params:
        entities$: vars.entities

  game.input.cursor:
    - command: follow.set-target
      vars:
        entities$: map(ListComponents('follow'), {.Entity})
      condition: len(vars.entities) > 0
      params:
        entities$: vars.entities
        x$: env.cursor.x
        y$: env.cursor.y

  game.draw:
    - command: render
      condition: true
      params:
        screen$: env.screen
        components$: ListComponents('graphic')
